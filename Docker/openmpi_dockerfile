FROM ubuntu:20.04
ENV LLVM 16

RUN echo "# FAU mirrors" > /etc/apt/sources.list \
 && echo "deb http://ftp.fau.de/ubuntu focal main restricted universe multiverse" >> /etc/apt/sources.list \
 && echo "deb http://ftp.fau.de/ubuntu focal-updates main restricted universe multiverse" >> /etc/apt/sources.list \
 && echo "deb http://ftp.fau.de/ubuntu focal-security main restricted universe multiverse" >> /etc/apt/sources.list

# This platform includes dependencies for building docs
RUN apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      ca-certificates \
      curl \
      equivs \
      gpg \
      gpg-agent \
 && echo "Package: libomp-dev" >> ./libomp-dev \
 && echo "Section: libdevel" >> ./libomp-dev \
 && echo "Version: 1:${LLVM}" >> ./libomp-dev \
 && echo "Depends: libomp-${LLVM}-dev" >> ./libomp-dev \
 && echo "Description: LLVM OpenMP runtime - dev package" >> ./libomp-dev \
 && equivs-build ./libomp-dev \
 && echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${LLVM} main" > /etc/apt/sources.list.d/llvm.list \
 && curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key > /etc/apt/trusted.gpg.d/llvm.asc \
 && echo "deb https://apt.kitware.com/ubuntu/ focal main" > /etc/apt/sources.list.d/kitware.list \
 && curl -fsSl https://apt.kitware.com/keys/kitware-archive-latest.asc > /etc/apt/trusted.gpg.d/kitware.asc \
 && apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      build-essential \
      ca-certificates \
      clang-${LLVM} \
      cmake \
      curl \
      cython3 \
      gdb \
      gfortran \
      git \
      hdf5-tools \
      jupyter-notebook \
      libboost-dev \
      libboost-mpi-dev \
      libc++-${LLVM}-dev \
      libc++abi-${LLVM}-dev \
      libclang-${LLVM}-dev \
      libeigen3-dev \
      libfftw3-dev \
      libgmp-dev \
      libgsl-dev \
      libhdf5-dev \
      libmkl-full-dev \
      libmpfr-dev \
      libnfft3-dev \
      libomp-${LLVM}-dev \
      libopenmpi-dev \
      libpython3-dev \
      libscalapack-openmpi-dev \
      openmpi-bin \
      openmpi-common \
      python3-ase \
      python3-dev \
      python3-clang-${LLVM} \
      python3-mako \
      python3-matplotlib \
      python3-mpi4py \
      python3-numpy \
      python3-pytest \
      python3-scipy \
      python3-skimage \
      rsync \
      ./libomp-dev_${LLVM}_all.deb \
      && \
      apt-get autoremove --purge -y && \
      apt-get autoclean -y && \
      rm -rvf /var/cache/apt/* /var/lib/apt/lists/* ./libomp*

ENV CC=clang-${LLVM}
ENV CXX=clang++-${LLVM}
ENV FCFLAGS="-ggdb3 -march=broadwell"
ENV CFLAGS="-ggdb3 -march=broadwell"
ENV CXXFLAGS="-stdlib=libc++ -ggdb3 -march=broadwell"
ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ARG NCORES=12

# create source dirs
RUN cd / && mkdir -p triqs && mkdir -p source

# W90
RUN cd /source && git clone -b develop --depth 1 https://github.com/wannier-developers/wannier90.git wannier90 \
    && cd wannier90 \
    # Using gfortran compiler 
    && echo "F90 = mpif90 \n COMMS  = mpi \n MPIF90 = mpif90 \n FCOPTS = -O3 \n LIBS = -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl \n" > make.inc \
    && cd /source/wannier90 \
    && make default lib \
    && make install

# install qe
RUN cd /source && git clone -b qe-7.2 --depth 1 https://gitlab.com/QEF/q-e.git q-e \
   && cd q-e \
   && mkdir -p build && cd build \
   && cmake -D CMAKE_C_COMPILER=mpicc -D CMAKE_Fortran_COMPILER=mpif90 \
        -D CMAKE_VERBOSE_MAKEFILE=ON \
        -D BLA_VENDOR=Intel10_64lp_seq \
        -D QE_ENABLE_HDF5=ON \
        -D QE_FFTW_VENDOR=FFTW3 \
        -D QE_ENABLE_SCALAPACK=OFF \
        ../ \
    && make -j$NCORES all \ 
    && make install

# VASP for CSC calculations
COPY csc_vasp.tar.gz /
RUN tar xzvf csc_vasp.tar.gz --no-same-owner --xform='s/vasp\.6\.4\.1/vasp/g' && rm csc_vasp.tar.gz
COPY openmpi_vasp.makefile /vasp/makefile.include

# patch for Vasp CSC
COPY vasp_diffs /vasp/vasp_diffs
RUN cd /vasp/src \
    && for name in electron.F fileio.F locproj.F mlwf.F .objects; \
       do patch $name -p1 -i ../vasp_diffs/$name; done

RUN  cd /vasp/ \
     && make std \
     && rm -rf src/ build/ arch/

ENV PATH=/vasp/bin:${PATH}

# triqs
ENV CPATH=/triqs/include:/usr/include/mkl:${CPATH} \
    PATH=/triqs/bin:${PATH} \
    LIBRARY_PATH=/triqs/lib:${LIBRARY_PATH} \
    LD_LIBRARY_PATH=/triqs/lib:${LD_LIBRARY_PATH} \
    PYTHONPATH=/triqs/lib/python3.8/site-packages:${PYTHONPATH} \
    CMAKE_PREFIX_PATH=/triqs/share/cmake:${CMAKE_PREFIX_PATH} \
    TRIQS_ROOT=/triqs \
    CTEST_OUTPUT_ON_FAILURE=1 \
    OMPI_ALLOW_RUN_AS_ROOT=1 \
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 \
    OMPI_MCA_rmaps_base_oversubscribe=yes

COPY 0001-fix-BLAS-batch-strided-needs-sufficiently-new-MKL.patch /
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/TRIQS/triqs triqs.src \
    && mkdir -p triqs.build && cd triqs.build \
    && cmake ../triqs.src -DCMAKE_INSTALL_PREFIX=/triqs -DBLAS_LIBRARIES='/usr/lib/x86_64-linux-gnu/libmkl_rt.so;-lpthread;-lm;-ldl' \
    && patch ./deps/nda_src/c++/nda/blas/interface/cxx_interface.cpp /0001-fix-BLAS-batch-strided-needs-sufficiently-new-MKL.patch \
    && make -j$NCORES VERBOSE=1 && ctest -j$NCORES && make install

# dft_tools
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/TRIQS/dft_tools.git dft_tools.src \
    && mkdir -p dft_tools.build && cd dft_tools.build \
    && cmake ../dft_tools.src \
    && make -j$NCORES && make test && make install

# cthyb
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/TRIQS/cthyb.git cthyb.src \
    && mkdir -p cthyb.build && cd cthyb.build \
    && cmake ../cthyb.src  \
    && make -j$NCORES && ctest -j$NCORES && make install

# maxent
RUN cd /source && git clone -b 1.2.x --depth 1 https://github.com/TRIQS/maxent.git maxent.src \
    && mkdir -p maxent.build && cd maxent.build \
    && cmake ../maxent.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# TPRF
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/TRIQS/tprf.git tprf.src \
    && mkdir -p tprf.build && cd tprf.build \
    && cmake ../tprf.src  \
    && make -j$NCORES && make test && make install

# hubbardI
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/TRIQS/hubbardI.git hubbardI.src \
    && mkdir -p hubbardI.build && cd hubbardI.build \
    && cmake ../hubbardI.src \ 
    && make -j$NCORES && ctest -j$NCORES && make install

# hartree_fock
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/TRIQS/hartree_fock.git hartree_fock.src \
    && mkdir -p hartree_fock.build && cd hartree_fock.build \
    && cmake ../hartree_fock.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# download solid_dmft and install
COPY 0001-Add-override-capability-to-QE-cmdline.patch /
COPY 0001-Allow-mathematical-expression-to-be-passed-for-rando.patch /
COPY 0002-Restore-Python-3.8-compatibility-for-dictionary-merg.patch /
RUN cd /source && git clone -b 3.2.x --depth 1 https://github.com/flatironinstitute/solid_dmft.git solid_dmft.src \
    && (cd solid_dmft.src \
        && git apply /0001-Add-override-capability-to-QE-cmdline.patch \
        && git apply /0001-Allow-mathematical-expression-to-be-passed-for-rando.patch \
        && git apply /0002-Restore-Python-3.8-compatibility-for-dictionary-merg.patch \
       ) \
    && mkdir -p solid_dmft.build && cd solid_dmft.build \
    && cmake ../solid_dmft.src \
    && make test && make install

# remove source
RUN cd / && rm -rf source

# create a useful work dir
RUN cd / && mkdir work && cd work
ENV OMPI_MCA_btl_vader_single_copy_mechanism=none

# make python3 default
RUN `ln -s /usr/bin/python3 /usr/bin/python`

# expose port for jupyter
EXPOSE 8378

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
COPY jupyter_start.sh /usr/local/bin/jupyter.sh

RUN ["chmod", "+x", "/usr/local/bin/entrypoint.sh"]
RUN ["chmod", "+x", "/usr/local/bin/jupyter.sh"]

# change user and group id to match host machine if options are passed accordingly
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]


